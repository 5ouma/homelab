name: immich

services:
  server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:v1.115.0@sha256:8164e1bece154c7178e734031a41e1cb315debdf36ab0fdd23cd0e32732721fd
    environment:
      UPLOAD_LOCATION: ./library
      IMMICH_CONFIG_FILE: /config/immich.json
      DB_HOSTNAME: $DB_HOSTNAME
      DB_DATABASE_NAME: $DB_DATABASE_NAME
      DB_USERNAME: $DB_USERNAME
      DB_PASSWORD: $DB_PASSWORD
    volumes:
      - ./library:/usr/src/app/upload
    configs:
      - source: timezone
        target: /etc/localtime
      - source: immich_config
        target: /config/immich.json
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always

  machine-learning:
    container_name: immich_machine-learning
    image: ghcr.io/immich-app/immich-machine-learning:v1.114.0@sha256:fb99c5f25ec261f1debd56ff3f2e5c153a0b4a19658ab31a63ab0e16bf125f1f
    volumes:
      - model-cache:/cache
    restart: always

  database:
    container_name: immich_database
    image: tensorchord/pgvecto-rs:pg16-v0.2.1@sha256:ff2288833f32aa863ba46f4c6f5b5c143f526a2d27f4cca913c232f917a66602
    environment:
      POSTGRES_HOST: $DB_HOSTNAME
      POSTGRES_DB: $DB_DATABASE_NAME
      POSTGRES_USER: $DB_USERNAME
      POSTGRES_PASSWORD: $DB_PASSWORD
    volumes:
      - database:/var/lib/postgresql/data
      - backup:/tmp/backup
    healthcheck:
      test: pg_isready -d '$DB_DATABASE_NAME' -U '$DB_USERNAME' || exit 1
    labels:
      docker-volume-backup.archive-pre: pg_dumpall -l '$DB_DATABASE_NAME' -U '$DB_USERNAME' -f /tmp/backup/immich.sql -c --if-exists
    restart: always

  redis:
    container_name: immich_redis
    image: redis:7.2.5-alpine3.19@sha256:8f157725f8eee31e65a8d4765f1f986d76aedc1a0503345dfb63a2b1b5a441ee
    healthcheck:
      test: redis-cli ping || exit 1
    restart: always

  backup-database: &backup
    container_name: immich_backup-database
    image: offen/docker-volume-backup:v2.43.0@sha256:596f3eb4d8dff797f0655d3f99486ffdee39f8e38ecce1c615005dbff07ba1c2
    environment:
      BACKUP_CRON_EXPRESSION: 0 5 * * *
      BACKUP_FILENAME: immich_database_%Y%m%d.{{ .Extension }}
      BACKUP_SKIP_BACKENDS_FROM_PRUNE: s3
      AWS_S3_BUCKET_NAME: $R2_BUCKET_NAME
      AWS_S3_PATH: $R2_PATH
      BACKUP_ARCHIVE: /archive/database
      BACKUP_RETENTION_DAYS: 7
    env_file:
      - path: ../.env
        required: true
    volumes:
      - backup:/backup:ro
      - $BACKUP_DIR/database:/archive/database
    configs:
      - source: docker-socket
        target: /var/run/docker.sock
      - source: timezone
        target: /etc/localtime
    depends_on:
      database:
        condition: service_healthy
    restart: always

  backup-library:
    <<: *backup
    container_name: immich_backup-library
    environment:
      BACKUP_CRON_EXPRESSION: 0 5 * * *
      BACKUP_FILENAME: immich_library_%Y%m%d.{{ .Extension }}
      BACKUP_SOURCES: /library
      BACKUP_ARCHIVE: /archive/library
      BACKUP_RETENTION_DAYS: 5
    volumes:
      - ./library:/library:ro
      - $BACKUP_DIR/library:/archive/library

  cloudflare-tunnel:
    container_name: immich_cloudflare-tunnel
    image: cloudflare/cloudflared:2024.9.1@sha256:0b88e00d8f93f9d18197f11506f0f6bf0d9266b5a0361c068930a3fe45b68b72
    command: tunnel --no-autoupdate run
    environment:
      TUNNEL_TOKEN: $TUNNEL_TOKEN
    restart: always

volumes:
  model-cache:
  database:
  backup:

configs:
  docker-socket:
    file: /var/run/docker.sock
  timezone:
    file: /etc/localtime
  immich_config:
    file: ./config/immich.json
